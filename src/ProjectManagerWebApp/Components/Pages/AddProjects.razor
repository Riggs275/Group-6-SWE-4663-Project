@page "/Add-projects"
@using ProjectManagerLogic
@using Task = System.Threading.Tasks.Task
@rendermode InteractiveServer
@inject NavigationManager Navigation
@{
    DataManager dataManager = new DataManager();
    dataManager.ImportData("data.txt");
}
<h3>Add Projects</h3>
<div class="project-section">
    <div class="project-list">
        <div class="project-item selected">Project</div>
        <div class="project-details">
            <form @onsubmit="AddNewProject">
                <input type="text" class="input-field" placeholder="@Description" @bind="Description" required>
                <p>Assign users</p>
                <input type="text" class="input-field" placeholder="LeadUN" @bind="LeadUN" required>

                <input type="text" class="input-field" placeholder="@AddeeMember" @bind="AddeeMember">
                <p></p>
                <p>start date</p>
                <input type="date">
                <p></p>
                <p>end date</p>
                <input type="date"> 
                <p>amount of requirements</p>
                <input type="text"class="input-field"placeholder="number of requirements you want" @bind="amountUserTyped">
                
                @foreach (var item in dataManager.requirementMasterList)
                {
                    <p><strong>Requirements:@item.description @item.GetReferenceNumber()</strong></p>
                }
            </form>
            <form >
                @for(int i=0;i< amountUserTyped;i++){
                    <input type="text"class="input-field"placeholder="enter a number for the requirement you want"@bind=userRequirementsList[i]>
                }
            </form>
            <p><strong>Lead:@LeadUN:</strong></p>
            <p><strong>Added Members @AddeeMember:</strong></p>
            <p><strong>Project Status @projectStatus:</strong></p>
            <p><strong>Is Completed? Y/N ___</strong></p>
        </div>
    </div>
    <div class="project-notes">
        <p><strong>Notes:</strong></p>
        <textarea rows="15" cols="50"></textarea>
    </div>
    <div class="action-buttons">
        <button class="action-button"><NavLink href="Project-Dashboard">Back</NavLink></button>
        <button @onclick="() =>AddNewProject()">Submit</button>
    </div>
</div>

<style>
    /* Reuse the styling from the previous component */
</style>


@code {
    private string Description = "Description";
    private string LeadUN = "Lead Username";
    private string AddeeMember = "Add Member";
    private string StartDate = "@enter start date time";
    private string EndDate = "@enter end date time";
    private string Status = "Current Status";
    private string Priority = "Priority";
    string projectId = "";
    private int projectCount = 0;
    private string requirementsList = "Requirements";
    private string Lead = "Lead Username";
    private string membersList = "";
    private string projectSeverity = "";
    private string projectStatus = "";
    private int amountUserTyped;
    public int[] userRequirementsList = new int[5000];
    DataManager _dataManager = new DataManager();
    public void AddNewProject()
    {

        _dataManager.ImportData("data.txt");

        int Count = _dataManager.projectMasterList.Count;

        _dataManager.projectMasterList.Add(new Project());

        _dataManager.projectMasterList[Count].SetDescription(Description);
        _dataManager.projectMasterList[Count].SetProjectOwner(_dataManager.GetUser(LeadUN));
        _dataManager.projectMasterList[Count].AddProjectMember(_dataManager.GetUser(AddeeMember));
        _dataManager.projectMasterList[Count].AssignDate(true, DateTime.Parse(StartDate));
        _dataManager.projectMasterList[Count].AssignDate(false, DateTime.Parse(EndDate));
        _dataManager.projectMasterList[Count].ChangeProjectStatus(Status);
        _dataManager.projectMasterList[Count].ChangeProjectPriortity(Priority);
        Requirement dummyRequirement = new Requirement();
        for (int amountOfRequirements=0; amountOfRequirements < amountUserTyped; amountOfRequirements++)
        {
            dummyRequirement=_dataManager.GetRequirement(userRequirementsList[amountOfRequirements]);

           _dataManager.projectMasterList[Count].AddRequirement(true,dummyRequirement);
        }
        
        ExportAndDownload();
        ChangeProject();

    }
    public void Display(Project displayedProject)
    {
        projectId = displayedProject.GetProjectID();
        Description = displayedProject.Description;
        requirementsList = ("Functional Requirements: " +
                            displayedProject.DisplayRequirementsByPriority(true) +
                            "Nonfunctional Requirements: " +
                            displayedProject.DisplayRequirementsByPriority(false)).Replace
            ('\n', ' ');
        Lead = displayedProject.Lead.GetFullName();
        membersList = displayedProject.DisplayProjectMembers().Replace('\n', ',');
        projectSeverity = displayedProject.projectPriority.ToString();
        projectStatus = displayedProject.projectStatus.ToString();
    }

    public void ChangeProject()
    {
        
        if (_dataManager.projectMasterList.Count <= 0)
        {
            projectId = "Please submit a project";
        }

        else
        {
            projectCount = _dataManager.projectMasterList.Count;
            Display(_dataManager.projectMasterList[projectCount-1]);
        }
    }

    public void ImportData()
    {
        _dataManager.ImportData("data.txt");
    }

    private async Task ExportAndDownload()
    {

        _dataManager.SaveProjectsToFile("data.txt");

    }



}

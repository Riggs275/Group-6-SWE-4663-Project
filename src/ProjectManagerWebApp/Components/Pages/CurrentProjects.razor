@page "/current-projects"
@using ProjectManagerLogic
@using Task = System.Threading.Tasks.Task
@using Layout
@using System.ComponentModel.DataAnnotations
@rendermode InteractiveServer
@inject NavigationManager Navigation

@{
}


<h3>Current Projects</h3>
<div class="project-section">
    <div class="project-list">
        <div class="project-item selected"><strong>Project:</strong> @projectId</div>
        <div class="project-details">
            <p><strong>Project Description:</strong> @ProjectDescription</p>
            <p><strong>Requirements:</strong> @requirementsList</p>
            <p><strong>Owner:</strong> @Lead</p>
            <p><strong>Users:</strong> @membersList</p>
            <p><strong>Project Severity:</strong> @projectSeverity</p>
            <p><strong>Status:</strong> @projectStatus</p>
        </div>
    </div>
    <div class="project-notes">
        <p><strong>Notes:</strong></p>
        <textarea rows="15" cols="50"></textarea>
    </div>
    <div class="action-buttons">
        <button @onclick="() => ChangeProject()">Change Project</button>
        <button @onclick="() => ExportAndDownload()">Export</button>
        <button @onclick="() => ImportData()">Import</button>
        <button class="action-button">Cancel</button>
        <button class="action-button">Save</button>
    </div>
</div>

<style>
    /* Reuse the styling from the previous components */
</style>
@code {

    string projectId = "";
    string ProjectDescription = "";
    private int projectCount = 0;
    private string requirementsList = "";
    private string Lead = "";
    private string membersList = "";
    private string projectSeverity = "";
    private string projectStatus = "";

    DataManager _dataManager = new DataManager();

    public void Display(Project displayedProject)
    {
        projectId = displayedProject.GetProjectID();
        ProjectDescription = displayedProject.Description;
        requirementsList = ("Functional Requirements: " + 
                            displayedProject.DisplayRequirementsByPriority(true) +
                            "Nonfunctional Requirements: " +
                            displayedProject.DisplayRequirementsByPriority(false)).Replace
            ('\n', ' ');
        Lead = displayedProject.Lead.GetFullName();
        membersList = displayedProject.DisplayProjectMembers().Replace('\n', ',');
        projectSeverity = displayedProject.projectPriority.ToString();
        projectStatus = displayedProject.projectStatus.ToString();
    }

    public void ChangeProject() {
        
        if(_dataManager.projectMasterList.Count <= 0) {
            projectId = "No projects have been imported.";
        }
        else if (projectCount < _dataManager.projectMasterList.Count - 1) {
            projectCount++;
            Display(_dataManager.projectMasterList[projectCount]);
        }
        else {
            projectCount = 0;
            Display(_dataManager.projectMasterList[projectCount]);
        }
    }

    public void ImportData() {
        _dataManager.ImportData("data.txt");
    }

    private async Task ExportAndDownload() {
        
        _dataManager.SaveProjectsToFile("data.txt");
        
    }



}